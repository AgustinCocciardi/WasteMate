Computacion secuencial
Ventajas
Programacion más secnilla

Desventajas
No se aprovechan los recursos

Por qué usar paralelismo?
limitaciones fisicas de secuencial
complejidad de los programas
volumen de datos
complejidad del algoritmo

"Paralelismo" en monoprocesador
Procesador Vectorial
Varias UF unico procesador

Procesador escalar segmentado
Se solapan instrucciones en la ejecución

Super segmentado
Más solapamiento, achica el período de clock

Superescalar
+UF

Hyperthreading


VLIW
UNICO PROCESADOR CON VARIAS UNIDADES FUNCIONALES (ALUS; MULTIPLICADORES; ADMINISTRACION DE BUS). CORRE POR CUENTA DEL COMPILADOR. 

CLASIFICACIONES PARA SISTEMA PARALELO (TAX. FLYNN)
SISD
SIMD
MISD
MIMD


SpeedUp: Idealmente el tiempo en sec. debe ser mayor (p veces mas, siendo p el numero de procesadores) al tiempo secuencial.
SpeedUp = Ts/Tp

Eficiencia: Una eficiencia cercana a 1 indica que se están aprovechando los p procesadores de manera eficiente. (Valores entre 0 y 1).
SpeedUp/Nro. procesadores

En algunos casos supera ampliamente el valor de 1, esto puede deberse a speedup superlineales.
El speedup superlineal se produce por diferentes motivos, entre los destacados:
Algoritmo secuencial muy malo
Procesadores con memorias cache o accesos a memorias muy rápidos. Cada procesador trabaja mucho menos de forma paralela que secuencial.

Coste: En un algoritmo optimo coincidirá con el tiempo secuencial pero generalmente es mayor.
coste = Nro proc * t. algoritmo //

Función Overhead: Cuanto mayor es el orden de la función, peor es el comportamiento del algoritmo paralelo.

Overhead = coste - Ts

HPC - Cómputo de altas prestaciones

OPENMP
Componentes
Direc. Compiladore
Crear region paralela
Serializar secciones de código
Dividir bloques de cçódigo entre threads
Sicronizar threads
distribuir iteraciones

Bibliotecas de funciones
Fijar y usar el id de threads
Consultar el id del padre y total de hnos
Estado del bloque
Adm. bloqueos y anidamientos
Sincronizar threads

Variables de entrono
Fijar el número máximo de thread.
Fijar el tamaño de stack por thread.
Fijar afinidad de thread a procesadores.
Planificación de thread.
Administrar paralelismo anidado.

1 ”#pragma omp” Comienzo de la directivas OpenMP.
2 “nombre de la directiva” identifica la que se utilizara.
3 “parámetros” es opcional, no hay orden establecido.
4 “\n” nueva línea antes del bloque de código que aplica la directiva.
